// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package depedency

import (
	"github.com/gin-gonic/gin"
	"github.com/rabbitmq/amqp091-go"
	"restapi-bus/app"
	"restapi-bus/controller"
	"restapi-bus/cron_custom"
	"restapi-bus/external"
	"restapi-bus/middleware"
	"restapi-bus/models/database"
	"restapi-bus/repository"
	"restapi-bus/service"
)

// Injectors from injector.go:

func InitializedControllerCustomer(tr database.TrInterface, rdb *middleware.RedisClientDb) controller.CustomerControllerInterface {
	customerRepositoryInterface := repository.NewCustomerRepository()
	customerServiceInterface := service.NewCustomerService(customerRepositoryInterface, tr)
	customerControllerInterface := controller.NewCustomerController(customerServiceInterface, rdb)
	return customerControllerInterface
}

func InitializedControllerAgency(tr database.TrInterface, rdb *middleware.RedisClientDb) controller.AgencyControllerInterface {
	agencyRepositoryInterface := repository.NewAgencyRepository()
	agencyServiceInterface := service.NewAgencyService(agencyRepositoryInterface, tr)
	agencyControllerInterface := controller.NewAgencyController(agencyServiceInterface, rdb)
	return agencyControllerInterface
}

func InitializedControllerBus(tr database.TrInterface, rdb *middleware.RedisClientDb) controller.BusControllerInterface {
	busRepositoryInterface := repository.NewBusRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	busServiceInterface := service.NewBusService(busRepositoryInterface, agencyRepositoryInterface, tr)
	busControllerInterface := controller.NewBusController(busServiceInterface, rdb)
	return busControllerInterface
}

func InitializedControllerDriver(tr database.TrInterface, rdb *middleware.RedisClientDb) controller.ControllerDriverInterface {
	driverRepositoryInterface := repository.NewDiverRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	serviceDriverInterface := service.NewServiceDriver(driverRepositoryInterface, agencyRepositoryInterface, tr)
	controllerDriverInterface := controller.NewDriverController(serviceDriverInterface, rdb)
	return controllerDriverInterface
}

func InitializedControllerSchedule(tr database.TrInterface, rdb *middleware.RedisClientDb, cronJob croncustom.InterfaceCronJob) controller.ControllerScheduleInterface {
	scheduleRepositoryInterface := repository.NewScheduleRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	driverRepositoryInterface := repository.NewDiverRepository()
	busRepositoryInterface := repository.NewBusRepository()
	scheduleServiceInterface := service.NewScheduleService(scheduleRepositoryInterface, agencyRepositoryInterface, driverRepositoryInterface, cronJob, tr, busRepositoryInterface)
	controllerScheduleInterface := controller.NewScheduleController(scheduleServiceInterface, rdb)
	return controllerScheduleInterface
}

func InitializedControllerTicket(tr database.TrInterface, rdb *middleware.RedisClientDb, rmq *amqp091.Channel, paymid external.InterfacePayment, cronJob croncustom.InterfaceCronJob) controller.ControllerTicketInterface {
	busRepositoryInterface := repository.NewBusRepository()
	customerRepositoryInterface := repository.NewCustomerRepository()
	driverRepositoryInterface := repository.NewDiverRepository()
	ticketRepositoryInterface := repository.NewTicketRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	scheduleRepositoryInterface := repository.NewScheduleRepository()
	iMessageChannel := repository.BindMqChannel(rmq)
	ticketServiceInterface := service.NewTicketService(busRepositoryInterface, customerRepositoryInterface, driverRepositoryInterface, ticketRepositoryInterface, agencyRepositoryInterface, scheduleRepositoryInterface, iMessageChannel, paymid, cronJob, tr)
	controllerTicketInterface := controller.NewTicketController(ticketServiceInterface, rdb, rmq)
	return controllerTicketInterface
}

func InitializedServer(redisClientDb *middleware.RedisClientDb, channel *amqp091.Channel, interfacePayment external.InterfacePayment, interfaceCronJob croncustom.InterfaceCronJob, trInterface database.TrInterface) *gin.Engine {
	customerControllerInterface := InitializedControllerCustomer(trInterface, redisClientDb)
	agencyControllerInterface := InitializedControllerAgency(trInterface, redisClientDb)
	busControllerInterface := InitializedControllerBus(trInterface, redisClientDb)
	controllerDriverInterface := InitializedControllerDriver(trInterface, redisClientDb)
	controllerTicketInterface := InitializedControllerTicket(trInterface, redisClientDb, channel, interfacePayment, interfaceCronJob)
	controllerScheduleInterface := InitializedControllerSchedule(trInterface, redisClientDb, interfaceCronJob)
	engine := app.Router(customerControllerInterface, agencyControllerInterface, busControllerInterface, controllerDriverInterface, controllerTicketInterface, controllerScheduleInterface, interfaceCronJob, trInterface)
	return engine
}
