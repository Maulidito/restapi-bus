// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package depedency

import (
	"database/sql"
	"github.com/gin-gonic/gin"
	"github.com/rabbitmq/amqp091-go"
	"restapi-bus/app"
	"restapi-bus/controller"
	"restapi-bus/middleware"
	"restapi-bus/repository"
	"restapi-bus/service"
)

// Injectors from injector.go:

func InitializedControllerCustomer(db *sql.DB, rdb *middleware.RedisClientDb) controller.CustomerControllerInterface {
	customerRepositoryInterface := repository.NewCustomerRepository()
	customerServiceInterface := service.NewCustomerService(db, customerRepositoryInterface)
	customerControllerInterface := controller.NewCustomerController(customerServiceInterface, rdb)
	return customerControllerInterface
}

func InitializedControllerAgency(db *sql.DB, rdb *middleware.RedisClientDb) controller.AgencyControllerInterface {
	agencyRepositoryInterface := repository.NewAgencyRepository()
	agencyServiceInterface := service.NewAgencyService(db, agencyRepositoryInterface)
	agencyControllerInterface := controller.NewAgencyController(agencyServiceInterface, rdb)
	return agencyControllerInterface
}

func InitializedControllerBus(db *sql.DB, rdb *middleware.RedisClientDb) controller.BusControllerInterface {
	busRepositoryInterface := repository.NewBusRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	busServiceInterface := service.NewBusService(db, busRepositoryInterface, agencyRepositoryInterface)
	busControllerInterface := controller.NewBusController(busServiceInterface, rdb)
	return busControllerInterface
}

func InitializedControllerDriver(db *sql.DB, rdb *middleware.RedisClientDb) controller.ControllerDriverInterface {
	driverRepositoryInterface := repository.NewDiverRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	serviceDriverInterface := service.NewServiceDriver(db, driverRepositoryInterface, agencyRepositoryInterface)
	controllerDriverInterface := controller.NewDriverController(serviceDriverInterface, rdb)
	return controllerDriverInterface
}

func InitializedControllerSchedule(db *sql.DB, rdb *middleware.RedisClientDb) controller.ControllerScheduleInterface {
	scheduleRepositoryInterface := repository.NewScheduleRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	driverRepositoryInterface := repository.NewDiverRepository()
	busRepositoryInterface := repository.NewBusRepository()
	scheduleServiceInterface := service.NewScheduleService(scheduleRepositoryInterface, agencyRepositoryInterface, driverRepositoryInterface, busRepositoryInterface, db)
	controllerScheduleInterface := controller.NewScheduleController(scheduleServiceInterface, rdb)
	return controllerScheduleInterface
}

func InitializedControllerTicket(db *sql.DB, rdb *middleware.RedisClientDb, rmq *amqp091.Channel) controller.ControllerTicketInterface {
	busRepositoryInterface := repository.NewBusRepository()
	customerRepositoryInterface := repository.NewCustomerRepository()
	driverRepositoryInterface := repository.NewDiverRepository()
	ticketRepositoryInterface := repository.NewTicketRepository()
	agencyRepositoryInterface := repository.NewAgencyRepository()
	scheduleRepositoryInterface := repository.NewScheduleRepository()
	iMessageChannel := repository.BindMqChannel(rmq)
	ticketServiceInterface := service.NewTicketService(db, busRepositoryInterface, customerRepositoryInterface, driverRepositoryInterface, ticketRepositoryInterface, agencyRepositoryInterface, scheduleRepositoryInterface, iMessageChannel)
	controllerTicketInterface := controller.NewTicketController(ticketServiceInterface, rdb, rmq)
	return controllerTicketInterface
}

func InitializedServer(db *sql.DB, redisClientDb *middleware.RedisClientDb, channel *amqp091.Channel) *gin.Engine {
	customerControllerInterface := InitializedControllerCustomer(db, redisClientDb)
	agencyControllerInterface := InitializedControllerAgency(db, redisClientDb)
	busControllerInterface := InitializedControllerBus(db, redisClientDb)
	controllerDriverInterface := InitializedControllerDriver(db, redisClientDb)
	controllerTicketInterface := InitializedControllerTicket(db, redisClientDb, channel)
	controllerScheduleInterface := InitializedControllerSchedule(db, redisClientDb)
	engine := app.Router(customerControllerInterface, agencyControllerInterface, busControllerInterface, controllerDriverInterface, controllerTicketInterface, controllerScheduleInterface)
	return engine
}
